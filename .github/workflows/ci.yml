name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: 
      - 'v*'
      - '*-pre.*'
      - '*-rc.*'
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cbnsndwch/struktura-main

jobs:
  # ================================
  # Circuit Breaker - Skip CI Check
  # ================================
  check-skip-ci:
    runs-on: ubuntu-24.04
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should-skip }}
    steps:
      - name: Check for skip CI directive
        id: skip-check
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message || github.event.pull_request.title }}"
          echo "Commit message: $COMMIT_MESSAGE"
          
          if echo "$COMMIT_MESSAGE" | grep -q "#skip-ci"; then
            echo "üõë Found #skip-ci in commit message - stopping workflow"
            echo "should-skip=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ No #skip-ci found - continuing workflow"
            echo "should-skip=false" >> $GITHUB_OUTPUT
          fi

  # ================================
  # Code Quality & Testing
  # ================================
  quality-checks:
    needs: check-skip-ci
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run formatting check
        run: pnpm format

      - name: Run tests
        run: pnpm test

      - name: Build all packages
        run: pnpm build

  # ================================
  # Security Scanning
  # ================================
  security-scan:
    runs-on: ubuntu-24.04
    needs:
      - check-skip-ci
      - quality-checks
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run dependency security audit
        run: pnpm audit --audit-level moderate

      # TODO: reenable CodeQL when we're ready to make the repo public
      # 
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: javascript-typescript
      # 
      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v3

  # ================================
  # Docker Build & Push
  # ================================
  build-and-push:
    runs-on: ubuntu-24.04-arm
    needs: 
      - check-skip-ci
      - quality-checks
      - security-scan
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=match,pattern=v(.*),group=1
            type=match,pattern=(.+)-pre\.(.+)
            type=match,pattern=(.+)-rc\.(.+)
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/main.dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_IMAGE=node:22-alpine

  # ================================
  # Development Deployment
  # ================================
  deploy-dev:
    runs-on: ubuntu-24.04
    needs:
      - build-and-push
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    steps:
      - name: Deploy to Development
        run: |
          echo "üöÄ Deploying to DEV environment"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # TODO: Add actual deployment steps
          # This could include:
          # - Update Kubernetes deployment
          # - Trigger Docker Swarm service update
          # - Call deployment API
          # - Update environment variables

  # ================================
  # Staging Deployment (Pre-release)
  # ================================
  deploy-staging:
    runs-on: ubuntu-24.04
    needs:
      - build-and-push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && (contains(github.ref_name, '-pre.') || contains(github.ref_name, '-rc.'))
    environment: staging
    steps:
      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to STAGING environment"
          echo "Ref: ${{ github.ref }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # TODO: Add actual deployment steps

  # ================================
  # Production Deployment (Release)
  # ================================
  deploy-prod:
    runs-on: ubuntu-24.04
    needs:
      - build-and-push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to PRODUCTION environment"
          echo "Tag: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # TODO: Add actual deployment steps

  # ================================
  # Notification
  # ================================
  notify:
    runs-on: ubuntu-24.04
    needs: 
      - check-skip-ci
      - quality-checks
      - security-scan
      - build-and-push
    if: always() && needs.check-skip-ci.result == 'success'
    steps:
      - name: Determine notification status
        id: status
        run: |
          # Check if all required jobs succeeded
          if [[ "${{ needs.quality-checks.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" && "${{ needs.build-and-push.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "icon=‚úÖ" >> $GITHUB_OUTPUT
            echo "title=Build Successful" >> $GITHUB_OUTPUT
            echo "message=CI/CD Pipeline completed successfully! Docker image built and pushed." >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "icon=‚ùå" >> $GITHUB_OUTPUT
            echo "title=Build Failed" >> $GITHUB_OUTPUT
            echo "message=CI/CD Pipeline failed. Check the workflow logs for details." >> $GITHUB_OUTPUT
          fi

      - name: Send Telegram notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # Only send notification if secrets are configured
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "‚ö†Ô∏è  Telegram secrets not configured, skipping notification"
            exit 0
          fi

          # Prepare message content
          STATUS="${{ steps.status.outputs.status }}"
          ICON="${{ steps.status.outputs.icon }}"
          TITLE="${{ steps.status.outputs.title }}"
          MESSAGE="${{ steps.status.outputs.message }}"
          
          # Build detailed message
          TELEGRAM_MESSAGE="$ICON **$TITLE**
          
          üì¶ **Repository:** \`${{ github.repository }}\`
          üåø **Branch:** \`${{ github.ref_name }}\`
          üîó **Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          üë§ **Author:** ${{ github.actor }}
          üìù **Message:** ${{ github.event.head_commit.message }}
          
          $MESSAGE
          
          üîó [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          # Send to Telegram
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"$TELEGRAM_CHAT_ID\",
              \"text\": \"$TELEGRAM_MESSAGE\",
              \"parse_mode\": \"Markdown\",
              \"disable_web_page_preview\": true
            }"
          
          echo "\n"
          echo "$ICON Telegram notification sent successfully"

      - name: Log final status
        run: |
          if [[ "${{ steps.status.outputs.status }}" == "success" ]]; then
            echo "‚úÖ CI/CD Pipeline completed successfully"
          else
            echo "‚ùå CI/CD Pipeline failed"
            exit 1
          fi