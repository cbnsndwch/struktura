name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: 
      - 'v*'
      - '*-pre.*'
      - '*-rc.*'
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cbnsndwch/struktura-main

jobs:
  # ================================
  # Code Quality & Testing
  # ================================
  quality-checks:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'

      - name: Install pnpm
        run: npm install -g pnpm@10.17.1

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run formatting check
        run: pnpm format

      - name: Run tests
        run: pnpm test

      - name: Build all packages
        run: pnpm build

  # ================================
  # Security Scanning
  # ================================
  security-scan:
    runs-on: ubuntu-24.04
    needs:
      - quality-checks
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'

      - name: Install pnpm
        run: npm install -g pnpm@10.17.1

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run dependency security audit
        run: pnpm audit --audit-level moderate

      # TODO: reenable CodeQL when we're ready to make the repo public
      # 
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: javascript-typescript
      # 
      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v3

  # ================================
  # Docker Build & Push
  # ================================
  build-and-push:
    runs-on: ubuntu-24.04-arm
    needs: 
      - quality-checks
      - security-scan
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=match,pattern=v(.*),group=1
            type=match,pattern=(.+)-pre\.(.+)
            type=match,pattern=(.+)-rc\.(.+)
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/main.dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_IMAGE=node:22-alpine

  # ================================
  # Development Deployment
  # ================================
  deploy-dev:
    runs-on: ubuntu-24.04
    needs:
      - build-and-push
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    steps:
      - name: Deploy to Development
        run: |
          echo "üöÄ Deploying to DEV environment"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # TODO: Add actual deployment steps
          # This could include:
          # - Update Kubernetes deployment
          # - Trigger Docker Swarm service update
          # - Call deployment API
          # - Update environment variables

  # ================================
  # Staging Deployment (Pre-release)
  # ================================
  deploy-staging:
    runs-on: ubuntu-24.04
    needs:
      - build-and-push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && (contains(github.ref_name, '-pre.') || contains(github.ref_name, '-rc.'))
    environment: staging
    steps:
      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to STAGING environment"
          echo "Ref: ${{ github.ref }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # TODO: Add actual deployment steps

  # ================================
  # Production Deployment (Release)
  # ================================
  deploy-prod:
    runs-on: ubuntu-24.04
    needs:
      - build-and-push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to PRODUCTION environment"
          echo "Tag: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # TODO: Add actual deployment steps

  # ================================
  # Notification
  # ================================
  notify:
    runs-on: ubuntu-24.04
    needs: 
      - quality-checks
      - security-scan
      - build-and-push
    if: always()
    steps:
      - name: Notify team
        run: |
          if [[ "${{ needs.quality-checks.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" && "${{ needs.build-and-push.result }}" == "success" ]]; then
            echo "‚úÖ CI/CD Pipeline completed successfully"
          else
            echo "‚ùå CI/CD Pipeline failed"
            exit 1
          fi